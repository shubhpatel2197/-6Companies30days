bool checkCycle(int node, vector < vector<int > >& adj,vector<int>& vis, vector<int>& dfsvis) {
      vis[node] = 1;
      dfsvis[node] = 1;
      for (auto it: adj[node]) {
        if (!vis[it]) {
          if (checkCycle(it, adj, vis, dfsvis)) return true;
        } else if (dfsvis[it]) {
          return true;
        }
      }
      dfsvis[node] = 0;
      return false;
}

class Solution {
public:
    bool canFinish(int n, vector<vector<int>>& p) {

        vector<vector<int> > adj(n);

        for(int i=0;i<p.size();i++){

            adj[p[i][1]].push_back(p[i][0]);
        }

        vector<int> vis(n,0),dfsvis(n,0);


        for(int i=0;i<n;i++){
            if(vis[i]==0)
            if(checkCycle(i,adj,vis,dfsvis)==true){
                return false;
            }
        }

        return true;


    }
};
