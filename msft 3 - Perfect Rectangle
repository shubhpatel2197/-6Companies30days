class Solution {
public:
    bool isRectangleCover(vector<vector<int>>& v) {
        map<pair<int,int>,int> m;
        int x1=INT_MAX,y1=INT_MAX,x2=INT_MIN,y2=INT_MIN;

          sort(v.begin(),v.end());

        for(int i=0;i<v.size()-1;i++){
            if(v[i][0]==v[i+1][0] && v[i][1]==v[i+1][1] && v[i][2]==v[i+1][2] && v[i][3]==v[i+1][3])
            return false;
        }

        for(int i=0;i<v.size();i++){

            x1=min(x1,min(v[i][0],v[i][2]));
            x2=max(x2,max(v[i][0],v[i][2]));
            y2=max(y2,max(v[i][1],v[i][3]));
            y1=min(y1,min(v[i][1],v[i][3]));

            m[{v[i][0],v[i][1]}]++;
             m[{v[i][0],v[i][3]}]++;
              m[{v[i][2],v[i][1]}]++;
               m[{v[i][2],v[i][3]}]++;
        }
         if(m[{x1,y1}]!=1 || m[{x2,y2}]!=1 || m[{x1,y2}]!=1 || m[{x2,y1}]!=1)return false;
             
         else
            {m.erase({x1,y1});m.erase({x2,y2}); m.erase({x1,y2});  m.erase({x2,y1});}

            for(auto i:m){
           
            if(i.second%2!=0){
                return false;
            }
        }
         
        for(int i=0;i<v.size();i++){

            if(v[i][0]!=x1 && v[i][1]!=y1 && v[i][2]!=x2 && v[i][3]!=y2 && v[i][0]!=x2 && v[i][1]!=y2 && v[i][2]!=x1 && v[i][3]!=y1)
           {
   
         for(int j=0;j<v.size();j++){
  
         if(j!=i && v[j][0]>=v[i][0] && v[j][2]<=v[i][2] && v[j][1]<=v[i][1] && v[j][3]>=v[i][3]){
            return false;
         }

        }
     break;
    }
  }



            
  
        
        
        return true;
    }
};






class Solution {
public:
    bool isRectangleCover(vector<vector<int>> &rectangles)
    if (rectangles.size() == 0 || rectangles[0].size() == 0)
    {
        {
            return false;
        }
    
        int x1 = INT_MAX;
        int x2 = INT_MIN;
        int y1 = INT_MAX;
        int y2 = INT_MIN;
    
        unordered_set<string> set;
        long long area = 0;
    
        for (auto rect : rectangles)
        {
            x1 = min(rect[0], x1);
            y1 = min(rect[1], y1);
            x2 = max(rect[2], x2);
            y2 = max(rect[3], y2);
    
            area += ((long long)(rect[2] - rect[0])) * ((long long)(rect[3] - rect[1]));
    
            string s1 = to_string(rect[0]) + " " + to_string(rect[1]);
            string s2 = to_string(rect[0]) + " " + to_string(rect[3]);
            string s3 = to_string(rect[2]) + " " + to_string(rect[3]);
            string s4 = to_string(rect[2]) + " " + to_string(rect[1]);
    
            if (set.find(s1) != set.end())
            {
                set.erase(s1);
            }
            else
            {
                set.insert(s1);
            }
            if (set.find(s2) != set.end())
            {
                set.erase(s2);
            }
            else
            {
                set.insert(s2);
            }
            if (set.find(s3) != set.end())
            {
                set.erase(s3);
            }
            else
            {
                set.insert(s3);
            }
            if (set.find(s4) != set.end())
            {
                set.erase(s4);
            }
            else
            {
                set.insert(s4);
            }
        }
    
        if (set.find(to_string(x1) + " " + to_string(y1)) == set.end() || set.find(to_string(x1) + " " + to_string(y2)) == set.end() || set.find(to_string(x2) + " " + to_string(y1)) == set.end() || set.find(to_string(x2) + " " + to_string(y2)) == set.end() || set.size() != 4)
        {
            return false;
        }
    
        return area == ((long long)(x2 - x1)) * ((long long)(y2 - y1));
     }
};
    
